Parameters:
  AppName:
    Description: Application Name, used for the repository and Child stack Name
    Type: String
    Default: sample
  DevAwsAccountId:
    Description: AWS Account ID for Dev
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: must be an AWS account id
    Default: '159527342995'
  ProdAwsAccountId:
    Description: AWS Account ID for Production
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: must be an AWS account id
    Default: '159527342995'
  DynamicPipelineMakerLambdaArn:
    Description: Arn of lambda function to create dynamic pipeline.
    Type: String
  CodecommitCredentialsLambdaArn:
    Description: Arn of lambda function to create credentials for access to codecommit.
    Type: String
  BuildImageName:
    Description: Docker image for application build
    Type: String
    Default: aws/codebuild/nodejs:10.1.0
  ArtifactBucket:
    Description: Artifact Bucket
    Type: String
  ArtifactBucketKeyArn:
    Description: ARN of the Artifact Bucket KMS Key
    Type: String
  PipelineServiceRoleArn:
    Description: Pipeline Service Role ARN
    Type: String
  SamTranslationBucket:
    Description: S3 bucket for SAM Translations
    Type: String

Conditions:
  AddDevAccountPermissions: !Not [!Equals [ !Ref DevAwsAccountId, '' ]]
  AddProdAccountPermissions: !Not [!Equals [ !Ref ProdAwsAccountId, '' ]]

Resources:
  SecretDev:
    Condition: AddDevAccountPermissions
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret to define sensitive data for application in child accounts (Dev)
      KmsKeyId: !GetAtt SecretsManagerKey.Arn
      GenerateSecretString:
        SecretStringTemplate: '{"username": "sample-user"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Name: !Sub sample-secret-${AWS::Region}-${AWS::AccountId}-dev
      Tags:
        - Key: Stage
          Value: dev
  SecretProd:
    Condition: AddProdAccountPermissions
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret to define sensitive data for application in child accounts (Prod)
      KmsKeyId: !GetAtt SecretsManagerKey.Arn
      GenerateSecretString:
        SecretStringTemplate: '{"username": "sample-user"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Name: !Sub sample-secret-${AWS::Region}-${AWS::AccountId}-prod
      Tags:
        - Key: Stage
          Value: prod

  SecretPolicyDev:
    Condition: AddDevAccountPermissions
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref SecretDev
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${DevAwsAccountId}:role/SampleLambdaRole-${AWS::Region}-${DevAwsAccountId}-dev
            Action:
              - secretsmanager:GetSecretValue
            Resource: '*'
            Condition:
              ForAnyValue:StringEquals: # Only the latest secret can be retrieved (per best practices)
                secretsmanager:VersionStage: AWSCURRENT

  SecretPolicyProd:
    Condition: AddProdAccountPermissions
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref SecretProd
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${ProdAwsAccountId}:role/SampleLambdaRole-${AWS::Region}-${ProdAwsAccountId}-prod
            Action:
              - secretsmanager:GetSecretValue
            Resource: '*'
            Condition:
              ForAnyValue:StringEquals: # Only the latest secret can be retrieved (per best practices)
                secretsmanager:VersionStage: AWSCURRENT

  SecretsManagerKey: # This key is used to encrypt/decrypt the secret in Secrets Manager
    Type: AWS::KMS::Key
    Properties:
      Description: "Key for encrypting sample Secret Manager secret"
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow the dev and prod accounts to the key
            Effect: Allow
            Principal:
              AWS:
                - !If
                  - AddDevAccountPermissions
                  - !Sub arn:aws:iam::${DevAwsAccountId}:role/SampleLambdaRole-${AWS::Region}-${DevAwsAccountId}-dev
                  - !Ref AWS::NoValue
                - !If
                  - AddProdAccountPermissions
                  - !Sub arn:aws:iam::${ProdAwsAccountId}:role/SampleLambdaRole-${AWS::Region}-${ProdAwsAccountId}-prod
                  - !Ref AWS::NoValue
            Action:
              - kms:Decrypt
            Resource: '*'

  SMSecretAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/secrets-manager
      TargetKeyId: !Ref SecretsManagerKey

  Repository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref AppName
      Triggers:
        - CustomData: !Sub '{"SecretArnDev": "${SecretDev}","SecretsManagerKey": "${SecretsManagerKey.Arn}","AppName": "${AppName}","BuildImageName": "${BuildImageName}","ArtifactBucket": "${ArtifactBucket}","ArtifactBucketKeyArn": "${ArtifactBucketKeyArn}","SamTranslationBucket": "${SamTranslationBucket}","PipelineServiceRoleArn": "${PipelineServiceRoleArn}","DevAwsAccountId": "${DevAwsAccountId}"}'
          DestinationArn: !Ref DynamicPipelineMakerLambdaArn
          Events:
            - createReference
            - deleteReference
          Name: Create or delete dynamic pipeline for new branch

  DynamicPipelineMakerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref DynamicPipelineMakerLambdaArn
      Principal: codecommit.amazonaws.com
      SourceArn: !GetAtt Repository.Arn

  RepositoryUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub AWS-CICD-Quickstart-${AppName}-${AWS::Region}-${AWS::AccountId}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser

  CodecommitCredentials:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref CodecommitCredentialsLambdaArn
      IAM_USER_NAME: !Ref RepositoryUser

Outputs:
  SecretsManagerAliasName:
    Description: KMS Key Alias for the use of secrets across accounts
    Value: !Ref SecretsManagerKey
  SecretsManagerKey:
    Description: KMS Key for the use of secrets across accounts
    Value: !GetAtt SecretsManagerKey.Arn
  RepoCloneUrlHttp:
    Description: Url for HTTP Cloning 
    Value: !GetAtt Repository.CloneUrlHttp
  RepoCloneUrlSsh:
    Description: Url for SSH Cloning
    Value: !GetAtt Repository.CloneUrlSsh
  RepoSshConfigHost:
    Description: Url for SSH Cloning
    Value: !Sub git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${Repository.Name}
  RepoName:
    Description: Name of the Repo
    Value: !GetAtt Repository.Name
  IAMUserName:
    Description: IAM user to be able to use the repository
    Value: !Ref RepositoryUser
  SecretArnDev:
    Description: Dev Secret ARN
    Value:
      !If
        - AddDevAccountPermissions
        - !Ref SecretDev
        - ''
  SecretArnProd:
    Description: Prod Secret ARN
    Value:
      !If
        - AddProdAccountPermissions
        - !Ref SecretProd
        - ''
  GitUserName:
    Description: Username for access to the codecommit repository
    Value: !GetAtt CodecommitCredentials.UserName
  GitPassword:
    Description: Password for access to the codecommit repository
    Value: !GetAtt CodecommitCredentials.Password
